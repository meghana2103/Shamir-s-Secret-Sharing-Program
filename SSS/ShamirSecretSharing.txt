
import org.json.JSONObject;
import java.math.BigInteger;
import java.util.Map;

public class SecretSharing {
    
    public static void main(String[] args) {
        String input = "{ \"1\": { \"base\": \"10\", \"value\": \"4\" }, \"2\": { \"base\": \"2\", \"value\": \"111\" }, \"3\": { \"base\": \"10\", \"value\": \"12\" } }";
        
        JSONObject json = new JSONObject(input);

        // Parse the input and decode the y-values
        int[][] points = new int[json.length()][2];
        int i = 0;
        
        for(String key : json.keySet()) {
            JSONObject root = json.getJSONObject(key);
            int x = Integer.parseInt(key);
            int base = Integer.parseInt(root.getString("base"));
            String encodedY = root.getString("value");
            int y = new BigInteger(encodedY, base).intValue();  // Decode y value from the given base
            
            points[i][0] = x;
            points[i][1] = y;
            i++;
        }

        // Solve the polynomial and get the constant term
        double constantTerm = lagrangeInterpolation(points);
        System.out.println("Constant term (c): " + constantTerm);
    }
    
    // Implement Lagrange interpolation
    public static double lagrangeInterpolation(int[][] points) {
        double result = 0.0;
        int n = points.length;
        
        for (int i = 0; i < n; i++) {
            double term = points[i][1]; // Start with y_i

            for (int j = 0; j < n; j++) {
                if (i != j) {
                    term = term * (0 - points[j][0]) / (points[i][0] - points[j][0]);
                }
            }

            result += term;
        }
        return result;  // This result is the constant term 'c'
    }
}
       